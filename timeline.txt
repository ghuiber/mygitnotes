2012-02-06
Learning Git by doing: I will follow along with
http://www.sbf5.com/~cduan/technical/git/

I will document my progress from 1. Repositories to 5. Rebasing in this file.

1. Repositories

First, create a project directory:
In terminal, "cd ~/Documents/GitHub", then  "mkdir MyGitLessons". That's where this text file will be saved. Right now.
Next, "cd MyGitLessons", then "git init". This starts a repository.

Now, mark this file to be added the repository: "git add timeline.txt". Or, to add everything (which right now is just this file, but that might change), "git add .". What if I did both? It's all good.

Question: What if I "git add foo", where foo is a non-existent file? An error message will be thrown: "fatal: pathspec 'foo' did not match any files".

Now, add the file to the repository, really: "git commit". So, actual adding seems to happen in two steps: "git add" marks for addition, and "git commit" completes the addition. A commit message is required. You do "git commit -m "my first commit"" or you may do "git commit", but that will open vi and you will have to type in the commit message at the top, then exit with wq. So, it looks like you're typing in the actual file, but you're not. You can check that with "cat timeline.txt", which won't show the message, and with "git log" which will: so, you typed in the log, not in the file. All is well. Without a message, the commit is aborted. 

So, after the previous paragraph, I saved the file, and checked "git status" which showed a change between the version of timeline.txt that was committed and the version I just saved. The difference, of course, was the paragraph above. So, I did "git commit -a -m "I explained the commit"": -a means commit all that's changed, and -m means here comes the commit message. There. Now, I'll save and commit again, with the message "Commits are cheap."

Commits may be cheap, but you can't commit willy-nilly. If you try to do it twice in a row, ensuring that the second commit refers to a file that has suffered no modifications since the first commit, Git will respond tartly: "nothing to commit (working directory clean)".

Referring to a specific commit: each commit object has a SHA1 name. It's unique. Use it or its first few characters. For example, to check the difference between 2 objects, do "git diff object1 object2" where object1 and object2 are the first 7 characters of the two objects' SHA1 names. To check the difference between what is saved in your folder and the latest commit, type "git diff HEAD". In addition, each commit object has a head. That's just a reference to the object. The head of the current commit is HEAD, in all caps. In every repository, one head is always called master. Not sure yet why, or which head that is. It may have something to do with branching. 

Bonus: when you commit something you didn't mean to, and that's the current HEAD, you can fix it by committing the piece you want with "git commit --amend". This then makes the new commit the HEAD, and the previous will be discarded. That's a way to keep the chain of commit objects clean, I guess. Now I wonder if maybe I could cut out some intermediate commits. Surely, one after every paragraph is overkill. I know they're cheap, but I don't want to wade through a lot of them. 

Now, moving on to lesson 2: 

2. Branching

Say you're working on a paper, like this one, and commit after every paragraph. Your writing progresses one section at a time, and each section can consist of many paragraphs. Suppose that you are on section 2, and a draft you circulated came back with notes that require that you change a few things in section 1. Git lets you make those changes in a branch off the last commit of section 1. This leaves undisturbed whatever it is you're doing in section 2.

Example: as I'm going through this tutorial, I can't help having questions and wandering wherever Google or Stack Overflow sends me for answers. Just now, I learned that when you commit something you didn't mean to, and that's the current HEAD, you can fix it by committing the piece you want with "git commit --amend". This then makes the new commit the HEAD, and the previous will be discarded. That's a way to keep the chain of commit objects clean, I guess. Now I wonder if maybe I could cut out some intermediate commits. Surely, one after every paragraph is overkill. I know they're cheap, but I don't want to wade through a lot of them. In any case, nothing I'm writing about in this paragraph belongs under Branching. It should be added to the previous section, Repositories.

So, I should start by "git branch gh_mention_amend 9c68ccc", which says that I'm going to create a branch called "gh_mention_amend" -- my initials, plus what I want to do" at the object with the name starting with 9c68ccc. That is the last commit of the Repositories section, according to "git log" (so, it's a good idea to have descriptive commit messages). If I save this file right now, and then try "git checkout gh_mention_amend" Git will admonish me that I have un-committed changes. Right. So, I commit first, then I "git checkout gh_mention_amend". A cool thing happens next: "vim timeline.txt" will put me in the version of this file saved before I started writing this Branching section. It's almost like I could freak out now: I can't see any of the work I did in this section! Did I lose it? Holy shit, did I?

No, I did not. It's in a different object: called master, it has the complete chain of commits. At this point I am free to make any changes I want to the Repositories section. When I save it, I will commit it to the gh_mention_amend branch. I'll go ahead and stop here for now, commit this piece, go back to "git_mention_amend", and add the bit about "git commit --ammend" to the Repositories section. Here's hoping I really didn't fuck anything up.

So far so good. I started a new branch, moved the bit about "git commit --ammend" to the end of the Repositories section in that new branch. Can't see it here though. Time to learn about branch merges?

Not yet. Before merging branches, here's how to look at them: "git branch" will list them with a star next to the current head. "git diff [head1]..[head2]" as well as "git diff [head2]..[head1]" does what you might expect: diffs them. It's useful to run it both ways, with the two heads switched. Three dots in-between will diff the latter vs. the common ancestor of the two. "git log [head1]..[head2]" shows the change log btw head2 and the common ancestor of head1 and head2. Again switching the two around helps. Three dots, not so useful here. Now we're ready to move on to merging.

3. Merging

So, I added a note about "git commit --amend" to the first section of this document, but I can't see it here as I'm typing this. I made that change inside the "gh_mention_amend" branch, and I am now in the "master" branch. Since that change is permanent and the final version of this document should reflect it, it is now time to merge the "gh_mention_amend" branch into the "master". Merging the branch with head A *into* the branch with head B means that your current commit is B, and you'll be drawing changes as of head A into the tail of head B. Nothing happens to head A. You can still switch to it with the "git checkout A" command and you'll find it in the state last committed. But when you "git checkout B" next, you will see all the changes incorporated in it. This has a graphical representation in "git log", as you will see soon.

Alright. So I was in the master branch, saved and committed, and then attempted "git merge gh_mention_amend". Git protested a conflict, which was true: git_mention_amend consisted of the first section plus the paragraph that starts with "Bonus:". Master consisted of the first section minus that paragraph, plus everything else up to the previous paragraph. In addition to protesting a conflict, Git marked what was mismatched, and expected me to edit the difference away, and commit the resulting file. I did, and then when I said "git merge gh_mention_amend" again, it informed me that it was already up to date. So, I guess, that makes sense: if you edit the master and commit after having ordered a merge which turned up a conflict report, you have implicitly resolved the conflict and completed the merge. This works reasonably well for text delimited in paragraphs and sections. I guess with code you'll just have to make sure and use rigorous encapsulation, delimit things into functions and such. That will make conflict resolution easier.

Anyway: the conflict resolved and the merge completed, it's time to see the result. The best view for that comes from doing "git log --graph --oneline". The "--graph" option gives you little stars connected with lines that follow the shape of the commit tree. The "--oneline" option is a nice compressed view. You see that there's a branch that diverged from the trunk when "gh_mention_amend" was born, and rejoined the trunk when the merge was completed. The node where the branch rejoins the trunk seems to have two parents, right? It does. More on that when I get around to the difference between the caret^ and tilde~ operators.

Once the merge was completed, I deleted the gh_mention_amend branch: one less head to worry about. The command is "git branch -d gh_mention_amend". The picture from "git log --graph --oneline" is unchanged. The fact that I once had a separate branch is preserved in history. I can refer to any of its commits by name, and even branch from them. The head at gh_mention_amend is simply not needed anymore.

That said, you should only delete heads that have been merged in. If you try to delete a head that's still at the tip of a branch, you will make the commit at the tip of that branch impossible to refer to: that is called a dangling commit. It is useless, its information lost. You can force-delete a branch with a dangling commit by doing "git branch -D" but you should never put yourself into that situation, says the tutorial. I wonder why Git can't prevent it in the first place, with an error message in response to such an attempt.

4. Collaborating

Make a local copy of a remote repository: "git clone [remote_repository]" where [remote_repository] can be a simple file path or URI such as ssh:// or http:// (or git://, like I've seen on GitHub; more on GitHub later, I think). This will be a brand new copy, all yours. Its commit tree will have remote heads: a master head and others, as the case may be. By default, Git calls them origin/master, origin/branch1, etc. Your own local copy will have a current master commit point. You can refer to that commit point's head, then, as either origin/master, or master, I think.

If you want to work with origin/branch1 locally, you need to set up a tracking branch: "git branch --track branch1 origin/branch1" (assuming you want to name that local branch head branch1; you can name it anything, as long as it tracks what you want to track, which is origin/branch1.

If there is progress on the remote repository and you want your local copy updated, the command is "git pull" as follows: run simply as "git pull" it will update all the remote-tracking branches. So, if you've set up tracking, all you need is "git pull". If you haven't set up any tracking, the general command is "git pull [remote_repository_reference] [remote_head_name]". Suppose that the remote head you want is branch1, and the remote repository reference is "origin", as usual. This version of git pull will merge origin/branch1 into your local HEAD. That makes sense. On your own side, it's assumed that HEAD, your current commit, is where you want to be. If, for example, that is not the local master, but the local branch1, it's up to you to position yourself there ahead of the  "git pull" call, using "git checkout branch1".

"git pull" is actually shorthand for a sequence of two other commands: "git fetch" and "git merge". The former updates the origin heads, but leaves your own local heads unchanged. The latter merges the new origin heads into your local heads, just like "git merge" discussed in the previous section.

Adding commits to the remote repository: "git push". This has a default syntax similar to that of git pull: "git push [remote_repository_reference] [remote_head_name]". This, as you might imagine, pushes new commit objects in your local HEAD to the remote head you're pointing to. But the way this happens is that Gits sets the [remote_head_name] to point to the same commit SHA1 on the remote repository as it does on your local repository. This is tricky: Git requires that a push result in a fast-forward merge on the remote repository. That is, before the merge [remote_head_name] must point to an ancestor of your local HEAD, the commit that it will point to after the merge.

This may not happen if you did "git pull" when the remote repository master was at a certain commit point, then you branched off, and for some reason called the branch a master, and the old master something else. You can rename branches with "git branch -m [old_name] [new_name]". So suppose you did that, and now you're trying to push the change to the remote repository. This does not advance the repository master along the same commit path. It is moving it somewhere altogether new, and as a consequence it turns the old origin/master branch into a dangling commit: it has no name, so it's in the bad situation referenced in the last paragraph of the previous section.

So, dangling commits are a bad thing and Git complains about them. Take that complaint seriously. When you can't do a fast-forward merge with "git push" you've screwed something up. Stop and Google.

A similar mismatch can happen on the pull side: say the remote repository consists of commits A and B with origin/master at B when you do your first "git pull". Then you do some work and advance your local master to local commit C. At the same time, a different developer who did his own first "git pull" at the same time you did, did some work of his own, advanced the master to a different commit D, and pushed it back to the server. Now when you do "git pull" you have a problem: the origin/master can't do a fast-forward merge, because it's not an ancestor of your local master. You look like this:

Remote repository            Your local repository

        +---(D)
       /     origin/master          
(A)---(B)                    (A)---(B)---(C)
                                          master

What Git does when it sees this is what's sensible: merges (D) and (C) into a new commit (E) on your local repository:

        +---(D)---+
       /           \
(A)---(B)---(C)---(E)
                   master

Adding and deleting branches remotely 

You add a new branch onto the remote repository with "git push --set-upstream origin new-branch", but see the chunk of commands that this a modern shortcut for (as of Git 1.7):
git push origin new-branch
git checkout [some-other-branch]
git branch -f new-branch origin/new-branch
git checkout new-branch

See what this did? You push the new branch, move into some other local branch, then with "git branch -f" you set up your local new branch to "git pull" from the remote repository by default. Then you check it out. This whole succession makes sense, but it's nice to have the "--set-upstream" shortcut.

To delete a remote branch, just do "git push [remote-repository-reference] :[head-name]". The colon means that you're pushing "no data" into the remote head_name.

That's how collaborating goes. A remote repository should do only push/pull, so nobody makes direct edits on the code in it. All editing should happen on local copies. GitHub is basically a public remote repository service. You do push/pull on/off it.
 
